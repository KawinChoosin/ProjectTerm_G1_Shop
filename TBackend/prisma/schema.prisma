datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Category {
  CG_id   Int      @id @default(autoincrement())
  CG_name String   @db.VarChar(255)
  Product Product[]
}

model Product {
  P_id          Int      @id @default(autoincrement())
  P_name        String   @db.VarChar(255)
  P_description String?  @db.Text
  P_quantity    Int
  P_price       Decimal  // Changed to Decimal for precise floating point numbers
  P_img         String? @db.VarChar(1000)
  CG_id         Int
  Category      Category @relation(fields: [CG_id], references: [CG_id])

  Rate          Rate[]
  Comment       Comment[]
  OrderDetail   OrderDetail[]
  CartDetail    CartDetail[]
  Favourite     Favourite[]
}

model Customer {
  C_id       Int      @id @default(autoincrement())
  C_name     String   @db.VarChar(255)
  C_password String   @db.VarChar(255)
  C_email    String   @db.VarChar(255)
  C_gender   String   @db.VarChar(10)
  C_age      Int

  Order      Order[]
  CartDetail CartDetail[]
  Address     Address[]  
  Favourite     Favourite[]
}

model Order {
  O_id      Int      @id @default(autoincrement())
  C_id      Int
  Q_Date_time DateTime
  O_Total     Decimal     // Changed to integer
  PM_id     Int
  A_id      Int
  O_Description  String?  @db.Text

  Customer  Customer @relation(fields: [C_id], references: [C_id])
  Payment   Payment  @relation(fields: [PM_id], references: [PM_id])
  Address     Address @relation(fields: [A_id], references: [A_id])
  OrderDetail OrderDetail[]
}

model OrderDetail {
  OD_id     Int      @id @default(autoincrement())
  O_id      Int
  P_id      Int
  OD_quantity Int
  OD_price  Decimal     // Changed to integer
  Order     Order   @relation(fields: [O_id], references: [O_id])
  Product   Product @relation(fields: [P_id], references: [P_id])
}

model Payment {
  PM_id     Int      @id @default(autoincrement())
  PM_amount Decimal     // Changed to integer
  PM_type   String   @db.VarChar(50)
  Date_time DateTime

  Order     Order[]
}

model Rate {
  R_id         Int      @id @default(autoincrement())
  R_total      Decimal     // Changed to integer
  R_createDate DateTime
  P_id         Int
  Product      Product @relation(fields: [P_id], references: [P_id])
}

model Comment {
  CM_id        Int      @id @default(autoincrement())
  CM_text      String   @db.Text
  CM_createDate DateTime
  P_id         Int
  Product      Product @relation(fields: [P_id], references: [P_id])
}

model CartDetail {
  CA_id       Int      @id @default(autoincrement())
  C_id        Int
  P_id        Int
  CA_quantity Int
  CA_price    Decimal

  // Define the relation fields if necessary
  Product     Product @relation(fields: [P_id], references: [P_id])
  Customer    Customer @relation(fields: [C_id], references: [C_id])

  @@unique([C_id, P_id]) // Composite key to ensure a unique combination
}

model Address {
  A_id         Int      @id @default(autoincrement())
  C_id         Int
  A_street     String   @db.VarChar(255)
  A_city       String   @db.VarChar(100)
  A_state      String   @db.VarChar(100)
  A_postalCode String   @db.VarChar(20)
  A_country    String   @db.VarChar(100)
  
  Customer     Customer @relation(fields: [C_id], references: [C_id])
  Order        Order[]
}

model Favourite {
  Fav_id      Int      @id @default(autoincrement())
  C_id        Int
  P_id        Int

  // Define the relation fields if necessary
  Product     Product @relation(fields: [P_id], references: [P_id])
  Customer    Customer @relation(fields: [C_id], references: [C_id])

  @@unique([C_id, P_id]) // Composite key to ensure a unique combination
}